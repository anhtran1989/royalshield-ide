<?xml version="1.0" encoding="utf-8"?>

<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
                       xmlns:s="library://ns.adobe.com/flex/spark"
                       xmlns:mx="library://ns.adobe.com/flex/mx"
                       xmlns:ide="royalshield.components.*"
                       xmlns:menu="royalshield.components.menu.*"
                       implements="royalshield.core.IRoyalShieldIDE"
                       minWidth="800"
                       minHeight="600"
                       showStatusBar="false"
                       backgroundColor="0x494949"
                       preinitialize="applicationPreinitializeHandler(event)"
                       creationComplete="applicationCreationCompleteHandler(event)" >
    
    <fx:Style source="royal_shield.css"/>
    
    <fx:Script>
        <![CDATA[
            import mx.events.FlexEvent;
            
            import royalshield.brushes.BrushManager;
            import royalshield.brushes.IBrushManager;
            import royalshield.drawing.DrawingManager;
            import royalshield.drawing.IDrawingManager;
            import royalshield.events.BrushEvent;
            import royalshield.events.MenuEvent;
            import royalshield.history.HistoryActionGroup;
            import royalshield.history.IHistoryManager;
            import royalshield.history.RSHistoryManager;
            import royalshield.settings.ISettingsManager;
            import royalshield.settings.RoyalShieldSettings;
            import royalshield.settings.SettingsManager;
            import royalshield.utils.DescriptorUtil;
            import royalshield.world.IWorldMap;
            import royalshield.world.WorldMap;
            
            //--------------------------------------------------------------------------
            // PROPERTIES
            //--------------------------------------------------------------------------
            
            private var m_settingsManager:ISettingsManager;
            private var m_settings:RoyalShieldSettings;
            private var m_brushManager:IBrushManager;
            private var m_drawingManager:IDrawingManager;
            private var m_historyManager:IHistoryManager;
            private var m_worldMap:IWorldMap;
            private var m_showGrid:Boolean;
            
            //--------------------------------------
            // Getters / Setters 
            //--------------------------------------
            
            public function get settingsManager():ISettingsManager { return m_settingsManager; }
            public function get brushManager():IBrushManager { return m_brushManager; }
            public function get drawingManager():IDrawingManager { return m_drawingManager; }
            public function get historyManager():IHistoryManager { return m_historyManager; }
            
            public function get showGrid():Boolean { return m_showGrid; }
            public function set showGrid(value:Boolean):void
            {
                if (m_showGrid != value) {
                    m_showGrid = value;
                    
                    if (editorPanel && editorPanel.mapDisplay)
                        editorPanel.mapDisplay.showGrid = m_showGrid;
                }
            }
            
            //--------------------------------------------------------------------------
            // METHODS
            //--------------------------------------------------------------------------
            
            //--------------------------------------
            // Private
            //--------------------------------------
            
            private function loadSettings():void
            {
                m_settings = new RoyalShieldSettings();
                m_settingsManager.loadSettings(m_settings);
            }
            
            private function test():void
            {
                m_worldMap = new WorldMap();
                editorPanel.worldMap = m_worldMap;
                editorPanel.mapDisplay.onMouseMapChanged.add(mouseMapChangedCallback);
                m_drawingManager.addTarget(editorPanel.mapDisplay);
                RSHistoryManager(m_historyManager).map = m_worldMap;
            }
            
            //--------------------------------------
            // Event Handlers
            //--------------------------------------
            
            protected function applicationPreinitializeHandler(event:FlexEvent):void
            {
                m_settingsManager = SettingsManager.getInstance();
                m_brushManager = BrushManager.getInstance();
                m_brushManager.cursorManager = this.cursorManager;
                m_drawingManager = DrawingManager.getInstance();
                m_historyManager = RSHistoryManager.getInstance();
                m_historyManager.addActionGroup(new HistoryActionGroup("default"));
                
                loadSettings();
            }
            
            protected function applicationCreationCompleteHandler(event:FlexEvent):void
            {
               this.title = DescriptorUtil.getName() + " " + DescriptorUtil.getVersionLabel();
               this.editorPanel.mapDisplay.showGrid = this.showGrid;
               
               test();
            }
            
            protected function nativeMenuSelectedHandler(event:MenuEvent):void
            {
                switch(event.data)
                {
                    case IDEMenu.FILE_EXIT:
                        this.close();
                        break;
                    
                    case IDEMenu.EDIT_UNDO:
                        m_historyManager.undo();
                        break;
                    
                    case IDEMenu.EDIT_REDO:
                        m_historyManager.redo();
                        break;
                    
                    case IDEMenu.VIEW_SHOW_GRID:
                        this.showGrid = !this.showGrid;
                        break;
                    
                    case IDEMenu.HELP_ABOUT:
                        break;
                }
            }
            
            protected function toolsPanelBrushChangeHandler(event:BrushEvent):void
            {
                m_brushManager.brushType = event.brushType;
            }
            
            private function mouseMapChangedCallback(x:uint, y:uint, z:uint):void
            {
                if (statusbar && statusbar.positionLabel)
                    statusbar.positionLabel.text = "x:" + x + ", y:" + y + ", z:" + z;
            }
            
        ]]>
    </fx:Script>
    
    <s:menu>
        <menu:IDEMenu id="nativeMenu"
                      selected="nativeMenuSelectedHandler(event)"/>
    </s:menu>
    
    <ide:Toolbar width="100%"
                 height="35"/>
    
    <ide:ToolsPanel id="toolsPanel"
                    width="40"
                    height="100%"
                    top="35"
                    bottom="23"
                    brushChange="toolsPanelBrushChangeHandler(event)"/>
    
    <ide:EditorPanel id="editorPanel"
                     width="100%"
                     height="100%"
                     left="45"
                     right="255"
                     top="35"
                     bottom="23"/>
    
    <ide:ObjectsPanel id="objectsPanel"
                    width="250"
                    height="100%"
                    right="0"
                    top="35"
                    bottom="23"/>
    
    <ide:StatusBar id="statusbar"
                   width="100%"
                   height="23"
                   bottom="0"/>
</s:WindowedApplication>
