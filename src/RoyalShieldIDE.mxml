<?xml version="1.0" encoding="utf-8"?>

<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
                       xmlns:s="library://ns.adobe.com/flex/spark"
                       xmlns:mx="library://ns.adobe.com/flex/mx"
                       xmlns:ide="royalshield.components.*"
                       xmlns:menu="royalshield.components.menu.*"
                       implements="royalshield.core.IRoyalShieldIDE"
                       minWidth="800"
                       minHeight="600"
                       showStatusBar="false"
                       backgroundColor="0x494949"
                       preinitialize="applicationPreinitializeHandler(event)"
                       creationComplete="applicationCreationCompleteHandler(event)"
                       closing="windowedApplicationClosingHandler(event)">
    
    <fx:Style source="royal_shield.css"/>
    
    <fx:Script>
        <![CDATA[
            import mx.events.FlexEvent;
            
            import royalshield.brushes.BrushManager;
            import royalshield.brushes.IBrushManager;
            import royalshield.components.Alert;
            import royalshield.components.NewMapWindow;
            import royalshield.drawing.DrawingManager;
            import royalshield.drawing.IDrawingManager;
            import royalshield.edition.EditorManager;
            import royalshield.edition.IEditorManager;
            import royalshield.events.BrushEvent;
            import royalshield.events.EditorManagerEvent;
            import royalshield.events.MapPositionEvent;
            import royalshield.events.MenuEvent;
            import royalshield.managers.PopUpWindowManager;
            import royalshield.settings.ISettingsManager;
            import royalshield.settings.RoyalShieldSettings;
            import royalshield.settings.SettingsManager;
            import royalshield.utils.DescriptorUtil;
            import royalshield.utils.DialogDetail;
            
            //--------------------------------------------------------------------------
            // PROPERTIES
            //--------------------------------------------------------------------------
            
            private var m_settingsManager:ISettingsManager;
            private var m_settings:RoyalShieldSettings;
            private var m_brushManager:IBrushManager;
            private var m_drawingManager:IDrawingManager;
            private var m_editorManager:IEditorManager;
            private var m_applicationClosing:Boolean;
            private var m_waiting:Boolean;
            
            //--------------------------------------
            // Getters / Setters
            //--------------------------------------
            
            public function get settingsManager():ISettingsManager { return m_settingsManager; }
            public function get brushManager():IBrushManager { return m_brushManager; }
            public function get drawingManager():IDrawingManager { return m_drawingManager; }
            public function get editorManager():IEditorManager { return m_editorManager; }
            public function get applicationClosing():Boolean { return m_applicationClosing; }
            
            //--------------------------------------------------------------------------
            // METHODS
            //--------------------------------------------------------------------------
            
            //--------------------------------------
            // Public
            //--------------------------------------
            
            public function createNewMap():void
            {
                var window:NewMapWindow = new NewMapWindow();
                window.addEventListener(Event.CLOSE, closeHandler);
                window.open();
                
                PopUpWindowManager.addWindow(window);
                
                function closeHandler(event:Event):void
                {
                    if (window.detail == DialogDetail.CONFIRM)
                        m_editorManager.createMap(window.mapName, window.mapWidth, window.mapHeight, window.mapLayers);
                }
            }
            
            public function cancelClosing():void
            {
                m_applicationClosing = false;
            }
            
            //--------------------------------------
            // Private
            //--------------------------------------
            
            private function loadSettings():void
            {
                m_settings = new RoyalShieldSettings();
                m_settingsManager.loadSettings(m_settings);
            }
            
            private function saveSettings():void
            {
                m_settings.maximized = (nativeWindow.displayState == NativeWindowDisplayState.MAXIMIZED);
                m_settings.showGrid = m_editorManager.showGrid;
                m_settings.showMouseTile = m_editorManager.showMouseTile;
                m_settingsManager.saveSettings(m_settings);
            }
            
            //--------------------------------------
            // Event Handlers
            //--------------------------------------
            
            protected function applicationPreinitializeHandler(event:FlexEvent):void
            {
                m_settingsManager = SettingsManager.getInstance();
                m_brushManager = BrushManager.getInstance();
                m_brushManager.cursorManager = this.cursorManager;
                m_drawingManager = DrawingManager.getInstance();
                m_editorManager = EditorManager.getInstance();
                m_editorManager.addEventListener(EditorManagerEvent.EDITOR_REMOVED, editorRemovedHandler);
                m_editorManager.addEventListener(MapPositionEvent.MOUSE_POSITION, mousePositionHandler);
                
                Alert.cancelLabel = "Cancel";
                Alert.yesLabel = "Yes";
                Alert.yesToAllLabel = "Yes to All";
                Alert.noLabel = "No";
                Alert.okLabel = "Ok";
                
                loadSettings();
            }
            
            protected function applicationCreationCompleteHandler(event:FlexEvent):void
            {
               this.title = DescriptorUtil.getName() + " " + DescriptorUtil.getVersionLabel();
               
               if (m_settings.maximized)
                   maximize();
               
               m_editorManager.showGrid = m_settings.showGrid;
               m_editorManager.showMouseTile = m_settings.showMouseTile;
            }
            
            protected function windowedApplicationClosingHandler(event:Event):void
            {
                if (m_waiting || m_editorManager.waiting) {
                    event.preventDefault();
                    return;
                }
                
                m_applicationClosing = true;
                
                if (m_editorManager.changed) {
                    event.preventDefault();
                    m_editorManager.removeAll();
                    return;
                }
                
                saveSettings();
            }
            
            protected function nativeMenuSelectedHandler(event:MenuEvent):void
            {
                switch(event.data)
                {
                    case IDEMenu.FILE_NEW_PROJECT:
                        m_editorManager.removeAll();
                        break;
                    
                    case IDEMenu.FILE_NEW_MAP:
                        this.createNewMap();
                        break;
                    
                    case IDEMenu.FILE_EXIT:
                        this.exit();
                        break;
                    
                    case IDEMenu.EDIT_UNDO:
                        m_editorManager.undo();
                        break;
                    
                    case IDEMenu.EDIT_REDO:
                        m_editorManager.redo();
                        break;
                    
                    case IDEMenu.VIEW_ZOOM_IN:
                        m_editorManager.zoomIn();
                        break;
                    
                    case IDEMenu.VIEW_ZOOM_OUT:
                        m_editorManager.zoomOut();
                        break;
                    
                    case IDEMenu.VIEW_SHOW_GRID:
                        m_editorManager.showGrid = !m_editorManager.showGrid;
                        break;
                    
                    case IDEMenu.VIEW_SHOW_TILE:
                        m_editorManager.showMouseTile = !m_editorManager.showMouseTile;
                        break;
                    
                    case IDEMenu.HELP_ABOUT:
                        break;
                }
            }
            
            protected function toolsPanelBrushChangeHandler(event:BrushEvent):void
            {
                m_brushManager.brushType = event.brushType;
            }
            
            protected function editorRemovedHandler(event:EditorManagerEvent):void
            {
                if (m_applicationClosing && m_editorManager.editorCount == 0) {
                    m_waiting = false;
                    this.close();
                }
            }
            
            protected function mousePositionHandler(event:MapPositionEvent):void
            {
                statusbar.positionLabel.text = "x:" + event.x + ", y:" + event.y + ", z:" + event.z;
            }
            
        ]]>
    </fx:Script>
    
    <s:menu>
        <menu:IDEMenu id="nativeMenu"
                      selected="nativeMenuSelectedHandler(event);"/>
    </s:menu>
    
    <ide:Toolbar id="toolbar"
                 width="100%"
                 height="35"/>
    
    <ide:BrushesPanel id="toolsPanel"
                      width="40"
                      height="100%"
                      top="35"
                      bottom="23"
                      brushChange="toolsPanelBrushChangeHandler(event);"/>
    
    <ide:EditorPanel id="editorPanel"
                     width="100%"
                     height="100%"
                     left="45"
                     right="255"
                     top="35"
                     bottom="23"/>
    
    <ide:ObjectsPanel id="objectsPanel"
                    width="250"
                    height="100%"
                    right="0"
                    top="35"
                    bottom="23"/>
    
    <ide:StatusBar id="statusbar"
                   width="100%"
                   height="23"
                   bottom="0"/>
</s:WindowedApplication>
