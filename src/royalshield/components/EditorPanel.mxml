<?xml version="1.0" encoding="utf-8"?>

<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:mx="library://ns.adobe.com/flex/mx"
                   xmlns:ide="royalshield.components.*"
                   implements="mx.managers.IFocusManagerComponent"
                   backgroundColor="0x000000"
                   borderColor="0x000000"
                   creationComplete="creationCompleteHandler(event)">
    
    <fx:Script>
        <![CDATA[
            import mx.core.FlexGlobals;
            import mx.events.FlexEvent;
            import mx.events.ResizeEvent;
            
            import royalshield.core.GameConsts;
            import royalshield.core.IRoyalShieldIDE;
            import royalshield.events.DrawingEvent;
            import royalshield.world.IWorldMap;
            
            //--------------------------------------------------------------------------
            // PROPERTIES
            //--------------------------------------------------------------------------
            
            private var m_application:IRoyalShieldIDE;
            private var m_map:IWorldMap;
            private var m_scrollPoint:Point = new Point();
            private var m_timer:Timer;
            
            //--------------------------------------
            // Getters / Setters 
            //--------------------------------------
            
            public function get worldMap():IWorldMap { return m_map; }
            public function set worldMap(value:IWorldMap):void
            {
                if (m_map != value) {
                    if (m_map)
                        m_map.onPositionChanged.remove(mapPositionChangedCallback);
                    
                    m_map = value;
                    
                    if (mapDisplay)
                        mapDisplay.worldMap = m_map;
                    
                    if (m_map)
                        m_map.onPositionChanged.add(mapPositionChangedCallback);
                    
                    updateScrollBarValues();
                }
            }
            
            public function get scrollPoint():Point
            {
                if (initialized)
                    m_scrollPoint.setTo(horizontalScrollBar.value, verticalScrollBar.value);
                else
                    m_scrollPoint.setTo(0, 0);
                
                return m_scrollPoint;
            }
            
            //--------------------------------------------------------------------------
            // METHODS
            //--------------------------------------------------------------------------
            
            //--------------------------------------
            // Public
            //--------------------------------------
            
            public function onMoveMapNorth():void
            {
                if (m_map)
                    m_map.setPosition(m_map.x, Math.max(0, m_map.y - 1), m_map.z);
            }
            
            public function onMoveMapSouth():void
            {
                if (m_map)
                    m_map.setPosition(m_map.x, Math.min(verticalScrollBar.maximum, m_map.y + 1), m_map.z);
            }
            
            public function onMoveMapWest():void
            {
                if (m_map)
                    m_map.setPosition(Math.max(0, m_map.x - 1), m_map.y, m_map.z);
            }
            
            public function onMoveMapEast():void
            {
                if (m_map)
                    m_map.setPosition(Math.min(horizontalScrollBar.maximum, m_map.x + 1), m_map.y, m_map.z);
            }
            
            public function onCentralizeMap():void
            {
                if (m_map)
                    m_map.setPosition(uint(horizontalScrollBar.maximum * 0.5), uint(verticalScrollBar.maximum * 0.5), m_map.z);
            }
            
            //--------------------------------------
            // Private
            //--------------------------------------
            
            private function updateScrollBarValues():void
            {
                if (m_map) {
                    horizontalScrollBar.maximum = m_map.width - int(mapDisplay.width / GameConsts.VIEWPORT_TILE_SIZE * mapDisplay.zoom);
                    verticalScrollBar.maximum = m_map.height - int(mapDisplay.height / GameConsts.VIEWPORT_TILE_SIZE * mapDisplay.zoom);
                }
            }
            
            private function updateMapPosition():void
            {
                if (m_map) {
                    var x:uint = horizontalScrollBar.value;
                    var y:uint = verticalScrollBar.value;
                    if (m_map.inMapRange(x, y, m_map.z))
                        m_map.setPosition(x, y, m_map.z);
                }
            }
            
            private function update():void
            {
                updateScrollBarValues();
                updateMapPosition();
            }
            
            private function mapPositionChangedCallback(x:uint, y:uint, z:uint):void
            {
                if (horizontalScrollBar.value != x || verticalScrollBar.value != y) {
                    updateScrollBarValues();
                    horizontalScrollBar.value = x;
                    verticalScrollBar.value = y;
                }
            }
            
            //--------------------------------------
            // Event Handlers
            //--------------------------------------
            
            protected function creationCompleteHandler(event:FlexEvent):void
            {
                m_application = IRoyalShieldIDE(FlexGlobals.topLevelApplication);
                m_application.nativeWindow.addEventListener(NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE, stateChangeHandler);
                m_timer = new Timer(100);
                m_timer.addEventListener(TimerEvent.TIMER, timeCompleteHandler);
                mapDisplay.editorPanel = this;
                
                horizontalScrollBar.minimum = 0;
                horizontalScrollBar.addEventListener(Event.CHANGE, scrollbarChangeHandler);
                verticalScrollBar.minimum = 0;
                verticalScrollBar.addEventListener(Event.CHANGE, scrollbarChangeHandler);
            }
            
            protected function scrollbarChangeHandler(event:Event):void
            {
                updateMapPosition();
            }
            
            protected function timeCompleteHandler(event:TimerEvent):void
            {
                updateScrollBarValues();
                updateMapPosition();
                m_timer.stop();
            }
            
            protected function stateChangeHandler(event:NativeWindowDisplayStateEvent):void
            {
                if (m_timer && !m_timer.running)
                    m_timer.start();
            }
            
            override protected function keyDownHandler(event:KeyboardEvent):void
            {
                var keyCode:uint = event.keyCode;
                if (!event.controlKey && !event.shiftKey) {
                    switch(keyCode)
                    {
                        case Keyboard.UP:
                            this.onMoveMapNorth();
                            break;
                        
                        case Keyboard.DOWN:
                            this.onMoveMapSouth();
                            break;
                        
                        case Keyboard.LEFT:
                            this.onMoveMapWest();
                            break;
                        
                        case Keyboard.RIGHT:
                            this.onMoveMapEast();
                            break;
                    }
                }
            }
            
        ]]>
    </fx:Script>
    
    <ide:WorldMapDisplay id="mapDisplay"
                         left="0"
                         right="17"
                         top="0"
                         bottom="17"
                         zoom="updateScrollBarValues();"
                         resize="update();"/>
    
    <s:HScrollBar id="horizontalScrollBar"
                  focusEnabled="false"
                  width="100%"
                  right="17"
                  bottom="0"/>
    
    <s:VScrollBar id="verticalScrollBar"
                  focusEnabled="false"
                  height="100%"
                  right="0"
                  bottom="17"/>
    
    <s:Button id="centralizeButton"
              width="18"
              height="18"
              right="0"
              bottom="0"
              toolTip="Centralize"
              icon="@Embed('../assets/centralize_icon.png')"
              click="onCentralizeMap();"/>
</s:BorderContainer>
