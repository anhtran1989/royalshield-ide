<?xml version="1.0" encoding="utf-8"?>

<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
             xmlns:s="library://ns.adobe.com/flex/spark"
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
             alpha.disabledStates="0.5"
             minHeight="19"
             blendMode="normal">
    
    <!-- host component -->
    <fx:Metadata>
        <![CDATA[[HostComponent("spark.components.TextInput")]]]>
    </fx:Metadata>
    
    <!-- script styling -->
    <fx:Script fb:purpose="styling">
        <![CDATA[
            import mx.core.FlexVersion;
            
            //--------------------------------------------------------------------------
            // PROPERTIES
            //--------------------------------------------------------------------------
            
            private var m_paddingChanged:Boolean;
            
            //--------------------------------------
            // Getters / Setters
            //--------------------------------------
            
            override public function get contentItems():Array { return contentFill; }
            
            //--------------------------------------------------------------------------
            // METHODS
            //--------------------------------------------------------------------------
            
            //--------------------------------------
            // Override Public
            //--------------------------------------
            
            /**
             * @private
             */
            override public function get colorizeExclusions():Array 
            {
                // Since border is styleable via borderColor, no need to allow chromeColor to affect
                // the border.  This is wrapped in a compatibility flag since this change was added  
                // in Flex 4.5
                if (FlexVersion.compatibilityVersion < FlexVersion.VERSION_4_5)
                    return exclusions_4_0;
                
                return exclusions;
            }
            
            override public function styleChanged(styleProp:String):void
            {
                var allStyles:Boolean = !styleProp || styleProp == "styleName";
                
                super.styleChanged(styleProp);
                
                if (allStyles || styleProp.indexOf("padding") == 0)
                {
                    m_paddingChanged = true;
                    invalidateProperties();
                }
            }
            
            //--------------------------------------
            // Override Protected
            //--------------------------------------
            
            override protected function commitProperties():void
            {
                super.commitProperties();
                
                if (m_paddingChanged)
                {
                    updatePadding();
                    m_paddingChanged = false;
                }
            }
            
            override protected function initializationComplete():void
            {
                useChromeColor = true;
                super.initializationComplete();
            }
            
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
            {
                if (getStyle("borderVisible"))
                {
                    border.visible = true;
                    shadow.visible = true;
                    background.left = background.top = background.right = background.bottom = 1;
                    textDisplay.left = textDisplay.top = textDisplay.right = textDisplay.bottom = 1;
                    
                    if (promptDisplay)
                    {
                        promptDisplay.setLayoutBoundsSize(unscaledWidth - 2, unscaledHeight - 2);
                        promptDisplay.setLayoutBoundsPosition(1, 1);
                    }
                } 
                else
                {
                    border.visible = false;
                    shadow.visible = false;
                    background.left = background.top = background.right = background.bottom = 0;
                    textDisplay.left = textDisplay.top = textDisplay.right = textDisplay.bottom = 0;
                    
                    if (promptDisplay)
                    {
                        promptDisplay.setLayoutBoundsSize(unscaledWidth, unscaledHeight);
                        promptDisplay.setLayoutBoundsPosition(0, 0);
                    }
                }
                
                borderStroke.color = getStyle("borderColor");
                borderStroke.alpha = getStyle("borderAlpha");
                
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }
            
            //--------------------------------------
            // Private
            //--------------------------------------
            
            private function updatePadding():void
            {
                if (!textDisplay)
                    return;
                
                // Push padding styles into the textDisplay
                var padding:Number;
                
                padding = getStyle("paddingLeft");
                if (textDisplay.getStyle("paddingLeft") != padding)
                    textDisplay.setStyle("paddingLeft", padding);
                
                padding = getStyle("paddingTop");
                if (textDisplay.getStyle("paddingTop") != padding)
                    textDisplay.setStyle("paddingTop", padding);
                
                padding = getStyle("paddingRight");
                if (textDisplay.getStyle("paddingRight") != padding)
                    textDisplay.setStyle("paddingRight", padding);
                
                padding = getStyle("paddingBottom");
                if (textDisplay.getStyle("paddingBottom") != padding)
                    textDisplay.setStyle("paddingBottom", padding);
                
                if (!promptDisplay)
                    return;
                
                padding = getStyle("paddingLeft");
                if (promptDisplay.getStyle("paddingLeft") != padding)
                    promptDisplay.setStyle("paddingLeft", padding);
                
                padding = getStyle("paddingTop");
                if (promptDisplay.getStyle("paddingTop") != padding)
                    promptDisplay.setStyle("paddingTop", padding);
                
                padding = getStyle("paddingRight");
                if (promptDisplay.getStyle("paddingRight") != padding)
                    promptDisplay.setStyle("paddingRight", padding);
                
                padding = getStyle("paddingBottom");
                if (promptDisplay.getStyle("paddingBottom") != padding)
                    promptDisplay.setStyle("paddingBottom", padding);
            }
            
            //--------------------------------------------------------------------------
            // STATIC
            //--------------------------------------------------------------------------
            
            /* Define the skin elements that should not be colorized. */
            private static const exclusions:Array = ["background", "textDisplay", "promptDisplay", "border"];
            
            /* exclusions before Flex 4.5 for backwards-compatibility purposes */
            private static const exclusions_4_0:Array = ["background", "textDisplay", "promptDisplay"];
            
            /* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
            private static const contentFill:Array = ["bgFill"];
            
        ]]>
    </fx:Script>
    
    <!-- script -->
    <fx:Script>
        <![CDATA[
            
            //--------------------------------------
            // Getters / Setters
            //--------------------------------------
            
            override public function get focusSkinExclusions():Array
            {
                return focusExclusions;
            }
            
            //--------------------------------------------------------------------------
            // STATIC
            //--------------------------------------------------------------------------
            
            private static const focusExclusions:Array = ["textDisplay"];
            
        ]]>
    </fx:Script>
    
    <!-- states -->
    <s:states>
        <s:State name="normal"/>
        <s:State name="disabled" stateGroups="disabledStates"/>
        <s:State name="normalWithPrompt"/>
        <s:State name="disabledWithPrompt" stateGroups="disabledStates"/>
    </s:states>
    
    <!-- fill -->
    <s:Rect id="background" left="1" right="1" top="1" bottom="1">
        <s:fill>
            <s:SolidColor id="bgFill" color="0xA2A2A2" />
        </s:fill>
    </s:Rect>
    
    <!-- border -->
    <s:Rect id="border" left="0" right="0" top="0" bottom="0">
        <s:stroke>
            <s:SolidColorStroke color="0x272727" id="borderStroke" weight="1"/>
        </s:stroke>
    </s:Rect>
    
    <!-- shadow -->
    <!--- @private -->
    <s:Rect id="shadow" left="1" top="1" right="1" height="1">
        <s:fill>
            <s:SolidColor color="0x000000" alpha="0.12" />
        </s:fill>
    </s:Rect>
    
    <!-- text -->
    <s:RichEditableText id="textDisplay"
                        verticalAlign="middle"
                        widthInChars="10"
                        left="1"
                        right="1"
                        top="1"
                        bottom="1"/>
    
    <!-- prompt text -->
    <s:Label id="promptDisplay"
             maxDisplayedLines="1"
             verticalAlign="middle"
             mouseEnabled="false"
             mouseChildren="false"
             includeIn="normalWithPrompt,disabledWithPrompt" 
             includeInLayout="false"
             paddingLeft="3"/>
</s:SparkSkin>
